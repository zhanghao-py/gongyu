package com.h3c.imc.acm.feeservice;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.7.6
 * 2013-07-27T20:12:27.760+08:00
 * Generated source version: 2.7.6
 * 
 */
@WebServiceClient(name = "feeService", 
                  wsdlLocation = "file:/E:/ZhangHao/workspace/gongyu/offline/wsdl/feeService.wsdl",
                  targetNamespace = "http://acm.imc.h3c.com/feeService") 
public class FeeService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://acm.imc.h3c.com/feeService", "feeService");
    public final static QName FeeServiceHttpSoap12Endpoint = new QName("http://acm.imc.h3c.com/feeService", "feeServiceHttpSoap12Endpoint");
    public final static QName FeeServiceHttpSoap11Endpoint = new QName("http://acm.imc.h3c.com/feeService", "feeServiceHttpSoap11Endpoint");
    public final static QName FeeServiceHttpEndpoint = new QName("http://acm.imc.h3c.com/feeService", "feeServiceHttpEndpoint");
    static {
        URL url = null;
        try {
            url = new URL("file:/E:/ZhangHao/workspace/gongyu/offline/wsdl/feeService.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(FeeService.class.getName())
                .log(java.util.logging.Level.INFO, 
                     "Can not initialize the default wsdl from {0}", "file:/E:/ZhangHao/workspace/gongyu/offline/wsdl/feeService.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public FeeService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public FeeService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public FeeService() {
        super(WSDL_LOCATION, SERVICE);
    }
    

    /**
     *
     * @return
     *     returns FeeServicePortType
     */
    @WebEndpoint(name = "feeServiceHttpSoap12Endpoint")
    public FeeServicePortType getFeeServiceHttpSoap12Endpoint() {
        return super.getPort(FeeServiceHttpSoap12Endpoint, FeeServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns FeeServicePortType
     */
    @WebEndpoint(name = "feeServiceHttpSoap12Endpoint")
    public FeeServicePortType getFeeServiceHttpSoap12Endpoint(WebServiceFeature... features) {
        return super.getPort(FeeServiceHttpSoap12Endpoint, FeeServicePortType.class, features);
    }
    /**
     *
     * @return
     *     returns FeeServicePortType
     */
    @WebEndpoint(name = "feeServiceHttpSoap11Endpoint")
    public FeeServicePortType getFeeServiceHttpSoap11Endpoint() {
        return super.getPort(FeeServiceHttpSoap11Endpoint, FeeServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns FeeServicePortType
     */
    @WebEndpoint(name = "feeServiceHttpSoap11Endpoint")
    public FeeServicePortType getFeeServiceHttpSoap11Endpoint(WebServiceFeature... features) {
        return super.getPort(FeeServiceHttpSoap11Endpoint, FeeServicePortType.class, features);
    }
    /**
     *
     * @return
     *     returns FeeServicePortType
     */
    @WebEndpoint(name = "feeServiceHttpEndpoint")
    public FeeServicePortType getFeeServiceHttpEndpoint() {
        return super.getPort(FeeServiceHttpEndpoint, FeeServicePortType.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns FeeServicePortType
     */
    @WebEndpoint(name = "feeServiceHttpEndpoint")
    public FeeServicePortType getFeeServiceHttpEndpoint(WebServiceFeature... features) {
        return super.getPort(FeeServiceHttpEndpoint, FeeServicePortType.class, features);
    }

}

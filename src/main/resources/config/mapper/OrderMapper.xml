<?xml version="1.0" encoding="UTF-8" ?>   
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cm.h3c.college.pay.payment.dao.OrderDao">

	<resultMap id="BaseResultMap" type="cm.h3c.college.pay.payment.bo.Order">
		<id column="id" property="id" jdbcType="BIGINT" />
		<result column="money" property="money" jdbcType="DECIMAL" />
		<result column="status" property="status" jdbcType="SMALLINT" />
		<result column="pay_result" property="payResult" jdbcType="SMALLINT" />
		<result column="cams_result" property="camsResult" jdbcType="SMALLINT" />
		<result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
		<result column="pay_time" property="payTime" jdbcType="TIMESTAMP" />
		<result column="finish_time" property="finishTime" jdbcType="TIMESTAMP" />
		<result column="account" property="account" jdbcType="VARCHAR" />
		<result column="college_id" property="collegeId" jdbcType="BIGINT" />
	</resultMap>
	
	<sql id="Base_Column_List">
		id, money, status, pay_result, cams_result, create_time, pay_time, finish_time, account, college_id
	</sql>
	
	<insert id="save"
		parameterType="cm.h3c.college.pay.payment.bo.Order"
		useGeneratedKeys="true" keyProperty="id">
		insert into gy_order
		<trim prefix="(" suffix=")" suffixOverrides=",">
			id, money, status, create_time, account, college_id,
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			#{id, jdbcType=BIGINT},
			#{money, jdbcType=DECIMAL},
			#{status, jdbcType=SMALLINT},
			now(),
			#{account, jdbcType=VARCHAR},
			#{collegeId, jdbcType=BIGINT}
		</trim>
	</insert>
	
	<update id="update"
		parameterType="cm.h3c.college.pay.payment.bo.Order"
		flushCache="true">
		update gy_order
		<set>
			<if test="money != null">
				money = #{money, jdbcType=DECIMAL},
			</if>
			<if test="status != null">
				status = #{status, jdbcType=SMALLINT},
			</if>
			<if test="payResult != null">
				pay_result = #{payResult, jdbcType=SMALLINT},
			</if>
			<if test="camsResult != null">
				cams_result = #{camsResult, jdbcType=SMALLINT},
			</if>
			<if test="account != null">
				account = #{account, jdbcType=VARCHAR},
			</if>
		</set>
		<where> 
			id = #{id, jdbcType=BIGINT}
		</where>
	</update>
	
	<update id="updateOrdersStatusByIds" flushCache="true">
		update gy_order
		<set>
			status = #{status, jdbcType=SMALLINT},
			<if test="status == 2">
				pay_time = now(),
			</if>
			<if test="status == 3">
				finish_time = now(),
			</if>
		</set>
		<where> 
			id in
			<foreach item="id" index="index" collection="ids" open="("
				separator="," close=")">
				#{id}
			</foreach>
		</where>
	</update>
	
	<update id="updateOrderStatusById" flushCache="true">
		update gy_order
		<set>
			status = #{status, jdbcType=SMALLINT},
			<if test="status == 2">
				pay_time = now(),
			</if>
			<if test="status == 3">
				finish_time = now(),
			</if>
		</set>
		<where> 
			id = #{id, jdbcType=BIGINT}
		</where>
	</update>
	
	<update id="updateOrderPayResultById" flushCache="true">
		update gy_order
		<set>
			pay_result = #{payResult, jdbcType=SMALLINT},
		</set>
		<where> 
			id = #{id, jdbcType=BIGINT}
		</where>
	</update>
	
	<update id="updateOrderCamsResultById" flushCache="true">
		update gy_order
		<set>
			cams_result = #{camsResult, jdbcType=SMALLINT},
		</set>
		<where> 
			id = #{id, jdbcType=BIGINT}
		</where>
	</update>
	
	<select id="findAllUnpaidOrdersMoreThan12Hours" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from gy_order
		<where>
			<![CDATA[
			pay_result IS NULL
			and status = 2
			and pay_time < subdate(now(), interval 12 hour)
			]]>
		</where>
	</select>
	
	<select id="findById" parameterType="java.lang.Long" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from gy_order
		<where> 
			id = #{id, jdbcType=BIGINT}
		</where>
	</select>
	

</mapper>

